<a href="/dashboard">Go Home</a><br></br>

<h1 id="name">Name: <%= container_info.Name %></h1>
<a id="image">Image: <%= container_info.Image %></a><br>
<a id="state">State: <%= container_info.State.Status %></a><br>
<a id="exitcode">Exit Code: <%= container_info.State.ExitCode %></a><br>
<a id="id">Container ID: <%= container_info.Id %></a><br>

<button id="start_button" onClick="start()" disabled>Start Container</button>

<button id="stop_button" onClick="stop()" disabled>Stop Container</button>

<button id="kill_button" onClick="kill()" disabled>Kill Container</button>

<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    const socket = new WebSocket(`ws://${window.location.host}${window.location.pathname}`);

    socket.onmessage = function (event) {
        const json = JSON.parse(event.data)
        console.log(json)
        document.getElementById("name").innerHTML = `Name: ${json.Name}`;
        document.getElementById("image").innerHTML = `Image: ${json.Image}`;
        document.getElementById("state").innerHTML = `State: ${json.State.Status}`;
        document.getElementById("exitcode").innerHTML = `Exit Code: ${json.State.ExitCode}`;
        if (json.State.Running===true) {
            document.getElementById("start_button").disabled = true;
        } else {
            document.getElementById("start_button").disabled = false;
        }

        if (json.State.Running===false) {
            document.getElementById("stop_button").disabled = true;
        } else {
            document.getElementById("stop_button").disabled = false;
        }

        if (json.State.Running===false) {
            document.getElementById("kill_button").disabled = true;
        } else {
            document.getElementById("kill_button").disabled = false;
        }
    }

    setInterval(function() {
        socket.send("data")
    }, 1000);
</script>

<script>
    function sleep(ms) {
        return new Promise((resolve) => {
            setTimeout(resolve, ms);
        });
    }
</script>

<script>
    async function start() {
        const res = await fetch("/dashboard/container/<%= container_info.Id %>/actions/start", { method: "POST", credentials: "same-origin"});
        const response = await res.json();
        if (response.status === 'STARTED') {
            Swal.fire({
                title: 'Success',
                text: 'The start signal has been sent to the contianer.',
                icon: 'success'
            })
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Uh Oh!',
                text: 'Something went wrong when sending the start signal to the container! Please try again later.',
            })
        }
    }
</script>

<script>
    async function stop() {
        const res = await fetch("/dashboard/container/<%= container_info.Id %>/actions/stop", { method: "POST", credentials: "same-origin"});
        const response = await res.json();
        if (response.status === 'STOPPED') {
            Swal.fire({
                title: 'Success',
                text: 'The stop signal has been sent to the contianer.',
                icon: 'success'
            })
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Uh Oh!',
                text: 'Something went wrong when sending the stop signal to the container! Please try again later.',
            })
        }
    }
</script>

<script>
    async function kill() {
        const res = await fetch("/dashboard/container/<%= container_info.Id %>/actions/kill", { method: "POST", credentials: "same-origin"});
        const response = await res.json();
        if (response.status === 'KILLED') {
            Swal.fire({
                title: 'Success',
                text: 'The kill signal has been sent to the contianer.',
                icon: 'success'
            })
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Uh Oh!',
                text: 'Something went wrong when sending the kill signal to the container! Please try again later.',
            })
        }
    }
</script>

<style>
    body {
        font-family: "Open Sans", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif; 
    }
</style>