<h1>Welcome to the dashboard.</h1>

<button onclick="start()">Start All Containers</button>

<button onclick="stop()">Stop All Containers</button>

<button onclick="kill()">Kill All Containers</button>

<% for (var i = 0; i < containers_list.length; i++) { %>
    <div id="container_<%= containers_list[i].Id %>">
        <h2><a id="name_<%= containers_list[i].Id %>" href="/dashboard/container/<%= containers_list[i].Id %>">Name: <%= containers_list[i].Names[0] %></a></h2>
        <a id="image_<%= containers_list[i].Id %>">Image: <%= containers_list[i].Image %></a><br>
        <a id="state_<%= containers_list[i].Id %>">State: <%= containers_list[i].State %></a><br>
        <a id="status_<%= containers_list[i].Id %>">Uptime: <%= containers_list[i].Status %></a><br>
        <a id="id_<%= containers_list[i].Id %>">Container ID: <%= containers_list[i].Id %></a><br>
    </div>
<% } %>

<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    const socket = new WebSocket(`ws://${window.location.host}${window.location.pathname}`);

    socket.onmessage = function (event) {
        const json = JSON.parse(event.data)

        for (var i = 0; i < json.length; i++) {
            const container = document.getElementById(`container_${json[i].Id}`);
            if (container === null) {
                
            } else {
                document.getElementById(`name_${json[i].Id}`).innerHTML = `Name: ${json[i].Names[0]}`
                document.getElementById(`image_${json[i].Id}`).innerHTML = `Image: ${json[i].Image}`
                document.getElementById(`state_${json[i].Id}`).innerHTML = `State: ${json[i].State}`
                document.getElementById(`status_${json[i].Id}`).innerHTML = `Status: ${json[i].Status}`
                document.getElementById(`id_${json[i].Id}`).innerHTML = `Container ID: ${json[i].Id}`
            }
        }
    }

    setInterval(function() {
        socket.send("data")
    }, 1000);
</script>

<script>
    async function start() {
        const res = await fetch("/dashboard/container/all/actions/start", { method: "POST", credentials: "same-origin"});
        const response = await res.json();
        if (response.status === 'STARTED') {
            Swal.fire({
                title: 'Success',
                text: 'The startup signal has been sent to all contianers. Please give them a minute to boot.',
                icon: 'success'
            })
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Uh Oh!',
                text: 'Something went wrong when sending the startup signal to the containers! Please try again later.',
            })
        }
    }
</script>

<script>
    async function stop() {
        const res = await fetch("/dashboard/container/all/actions/stop", { method: "POST", credentials: "same-origin"});
        const response = await res.json();
        if (response.status === 'STOPPED') {
            Swal.fire({
                title: 'Success',
                text: 'The stop signal has been sent to all contianers. Please give them a minute to shutdown.',
                icon: 'success'
            })
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Uh Oh!',
                text: 'Something went wrong when sending the stop signal to the containers! Please try again later.',
            })
        }
    }
</script>

<script>
    async function kill() {
        const res = await fetch("/dashboard/container/all/actions/kill", { method: "POST", credentials: "same-origin"});
        const response = await res.json();
        if (response.status === 'KILLED') {
            Swal.fire({
                title: 'Success',
                text: 'The kill signal has been sent to all contianers. Please give them a minute to shutdown.',
                icon: 'success'
            })
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Uh Oh!',
                text: 'Something went wrong when sending the kill signal to the containers! Please try again later.',
            })
        }
    }
</script>

<style>
    body {
        font-family: "Open Sans", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif; 
    }
</style>